// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  shopifyCustomerId String?  @unique
  password      String?
  role          String    @default("USER")
  loginAttempts Int       @default(0)
  lockedUntil   DateTime?
  lastLoginAt   DateTime?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // SocioPe relations
  socialPosts     SocialPost[]
  likes           Like[]
  comments        Comment[]
  reportsFiled    SociopeReport[] @relation("ReporterRelation")
  reportsResolved SociopeReport[] @relation("AdminRelation")

  // Follow relations
  followers Follow[] @relation("Following")
  following Follow[] @relation("Followers")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// SocioPe Enums
enum ReportType {
  POST
  COMMENT
  USER
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum PostVisibility {
  PUBLIC
  FOLLOWERS
  PRIVATE
}

// SocioPe Models
model SocialPost {
  id         String         @id @default(cuid())
  userId     String
  user       User           @relation(fields: [userId], references: [id])
  content    String
  images     String[]
  products   String[]
  visibility PostVisibility @default(PUBLIC)
  likes      Like[]
  comments   Comment[]
  tags       String[]
  views      Int            @default(0)
  shareCount Int            @default(0)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@index([userId])
  @@index([createdAt])
  @@index([tags])
}

model Like {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  postId    String
  post      SocialPost @relation(fields: [postId], references: [id])
  createdAt DateTime   @default(now())

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Comment {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  postId    String
  post      SocialPost @relation(fields: [postId], references: [id])
  content   String
  parentId  String?
  parent    Comment?   @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[]  @relation("CommentReplies")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([userId])
  @@index([postId])
  @@index([parentId])
}

model SociopeReport {
  id         String       @id @default(cuid())
  type       ReportType
  targetId   String
  reporterId String
  reporter   User         @relation("ReporterRelation", fields: [reporterId], references: [id])
  status     ReportStatus @default(PENDING)
  adminNotes String?
  resolvedBy String?
  admin      User?        @relation("AdminRelation", fields: [resolvedBy], references: [id])
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@index([reporterId])
  @@index([status])
}

model SociopeSettings {
  id              String   @id @default(cuid())
  autoModKeywords String[]
  userPostLimit   Int      @default(10)
  imageRequired   Boolean  @default(false)
  productRequired Boolean  @default(false)
  updatedAt       DateTime @updatedAt
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  follower    User     @relation("Followers", fields: [followerId], references: [id])
  following   User     @relation("Following", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}
